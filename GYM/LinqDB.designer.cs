#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GYM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GYM")]
	public partial class LinqDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCheckIn(tblCheckIn instance);
    partial void UpdatetblCheckIn(tblCheckIn instance);
    partial void DeletetblCheckIn(tblCheckIn instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblCustomer(tblCustomer instance);
    partial void UpdatetblCustomer(tblCustomer instance);
    partial void DeletetblCustomer(tblCustomer instance);
    partial void InserttblCustomerPlan(tblCustomerPlan instance);
    partial void UpdatetblCustomerPlan(tblCustomerPlan instance);
    partial void DeletetblCustomerPlan(tblCustomerPlan instance);
    partial void InserttblMeasurement(tblMeasurement instance);
    partial void UpdatetblMeasurement(tblMeasurement instance);
    partial void DeletetblMeasurement(tblMeasurement instance);
    partial void InserttblPayment(tblPayment instance);
    partial void UpdatetblPayment(tblPayment instance);
    partial void DeletetblPayment(tblPayment instance);
    partial void InserttblPlan(tblPlan instance);
    partial void UpdatetblPlan(tblPlan instance);
    partial void DeletetblPlan(tblPlan instance);
    partial void InserttblPlanType(tblPlanType instance);
    partial void UpdatetblPlanType(tblPlanType instance);
    partial void DeletetblPlanType(tblPlanType instance);
    partial void InserttblStatus(tblStatus instance);
    partial void UpdatetblStatus(tblStatus instance);
    partial void DeletetblStatus(tblStatus instance);
    partial void InserttblStock(tblStock instance);
    partial void UpdatetblStock(tblStock instance);
    partial void DeletetblStock(tblStock instance);
    #endregion
		
		public LinqDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GYMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblCheckIn> tblCheckIns
		{
			get
			{
				return this.GetTable<tblCheckIn>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblCustomer> tblCustomers
		{
			get
			{
				return this.GetTable<tblCustomer>();
			}
		}
		
		public System.Data.Linq.Table<tblCustomerPlan> tblCustomerPlans
		{
			get
			{
				return this.GetTable<tblCustomerPlan>();
			}
		}
		
		public System.Data.Linq.Table<tblMeasurement> tblMeasurements
		{
			get
			{
				return this.GetTable<tblMeasurement>();
			}
		}
		
		public System.Data.Linq.Table<tblPayment> tblPayments
		{
			get
			{
				return this.GetTable<tblPayment>();
			}
		}
		
		public System.Data.Linq.Table<tblPlan> tblPlans
		{
			get
			{
				return this.GetTable<tblPlan>();
			}
		}
		
		public System.Data.Linq.Table<tblPlanType> tblPlanTypes
		{
			get
			{
				return this.GetTable<tblPlanType>();
			}
		}
		
		public System.Data.Linq.Table<tblStatus> tblStatus
		{
			get
			{
				return this.GetTable<tblStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblStock> tblStocks
		{
			get
			{
				return this.GetTable<tblStock>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCheckIn")]
	public partial class tblCheckIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CheckInID;
		
		private long _CustomerPlanID;
		
		private int _StatusID;
		
		private System.DateTime _CheckInDate;
		
		private int _MemberTypeID;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private bool _IsDeleted;
		
		private EntityRef<tblCustomerPlan> _tblCustomerPlan;
		
		private EntityRef<tblStatus> _tblStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckInIDChanging(long value);
    partial void OnCheckInIDChanged();
    partial void OnCustomerPlanIDChanging(long value);
    partial void OnCustomerPlanIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnCheckInDateChanging(System.DateTime value);
    partial void OnCheckInDateChanged();
    partial void OnMemberTypeIDChanging(int value);
    partial void OnMemberTypeIDChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public tblCheckIn()
		{
			this._tblCustomerPlan = default(EntityRef<tblCustomerPlan>);
			this._tblStatus = default(EntityRef<tblStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CheckInID
		{
			get
			{
				return this._CheckInID;
			}
			set
			{
				if ((this._CheckInID != value))
				{
					this.OnCheckInIDChanging(value);
					this.SendPropertyChanging();
					this._CheckInID = value;
					this.SendPropertyChanged("CheckInID");
					this.OnCheckInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPlanID", DbType="BigInt NOT NULL")]
		public long CustomerPlanID
		{
			get
			{
				return this._CustomerPlanID;
			}
			set
			{
				if ((this._CustomerPlanID != value))
				{
					if (this._tblCustomerPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerPlanIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerPlanID = value;
					this.SendPropertyChanged("CustomerPlanID");
					this.OnCustomerPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._tblStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDate", DbType="DateTime NOT NULL")]
		public System.DateTime CheckInDate
		{
			get
			{
				return this._CheckInDate;
			}
			set
			{
				if ((this._CheckInDate != value))
				{
					this.OnCheckInDateChanging(value);
					this.SendPropertyChanging();
					this._CheckInDate = value;
					this.SendPropertyChanged("CheckInDate");
					this.OnCheckInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberTypeID", DbType="Int NOT NULL")]
		public int MemberTypeID
		{
			get
			{
				return this._MemberTypeID;
			}
			set
			{
				if ((this._MemberTypeID != value))
				{
					this.OnMemberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberTypeID = value;
					this.SendPropertyChanged("MemberTypeID");
					this.OnMemberTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomerPlan_tblCheckIn", Storage="_tblCustomerPlan", ThisKey="CustomerPlanID", OtherKey="CustomerPlanID", IsForeignKey=true)]
		public tblCustomerPlan tblCustomerPlan
		{
			get
			{
				return this._tblCustomerPlan.Entity;
			}
			set
			{
				tblCustomerPlan previousValue = this._tblCustomerPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblCustomerPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCustomerPlan.Entity = null;
						previousValue.tblCheckIns.Remove(this);
					}
					this._tblCustomerPlan.Entity = value;
					if ((value != null))
					{
						value.tblCheckIns.Add(this);
						this._CustomerPlanID = value.CustomerPlanID;
					}
					else
					{
						this._CustomerPlanID = default(long);
					}
					this.SendPropertyChanged("tblCustomerPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStatus_tblCheckIn", Storage="_tblStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public tblStatus tblStatus
		{
			get
			{
				return this._tblStatus.Entity;
			}
			set
			{
				tblStatus previousValue = this._tblStatus.Entity;
				if (((previousValue != value) 
							|| (this._tblStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStatus.Entity = null;
						previousValue.tblCheckIns.Remove(this);
					}
					this._tblStatus.Entity = value;
					if ((value != null))
					{
						value.tblCheckIns.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("tblStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Email;
		
		private string _Salary;
		
		private bool _IsAdmin;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSalaryChanging(string value);
    partial void OnSalaryChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(15)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="NVarChar(50)")]
		public string Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCustomer")]
	public partial class tblCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CustomerID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private char _Gender;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address;
		
		private string _Tel;
		
		private string _Email;
		
		private System.Nullable<long> _BarCode;
		
		private string _Note;
		
		private bool _IsActive;
		
		private EntitySet<tblCustomerPlan> _tblCustomerPlans;
		
		private EntitySet<tblMeasurement> _tblMeasurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(long value);
    partial void OnCustomerIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBarCodeChanging(System.Nullable<long> value);
    partial void OnBarCodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblCustomer()
		{
			this._tblCustomerPlans = new EntitySet<tblCustomerPlan>(new Action<tblCustomerPlan>(this.attach_tblCustomerPlans), new Action<tblCustomerPlan>(this.detach_tblCustomerPlans));
			this._tblMeasurements = new EntitySet<tblMeasurement>(new Action<tblMeasurement>(this.attach_tblMeasurements), new Action<tblMeasurement>(this.detach_tblMeasurements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(15)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="BigInt")]
		public System.Nullable<long> BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomer_tblCustomerPlan", Storage="_tblCustomerPlans", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<tblCustomerPlan> tblCustomerPlans
		{
			get
			{
				return this._tblCustomerPlans;
			}
			set
			{
				this._tblCustomerPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomer_tblMeasurement", Storage="_tblMeasurements", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<tblMeasurement> tblMeasurements
		{
			get
			{
				return this._tblMeasurements;
			}
			set
			{
				this._tblMeasurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCustomerPlans(tblCustomerPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomer = this;
		}
		
		private void detach_tblCustomerPlans(tblCustomerPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomer = null;
		}
		
		private void attach_tblMeasurements(tblMeasurement entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomer = this;
		}
		
		private void detach_tblMeasurements(tblMeasurement entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCustomerPlan")]
	public partial class tblCustomerPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CustomerPlanID;
		
		private long _CustomerID;
		
		private int _PlanID;
		
		private System.Nullable<double> _TotalFees;
		
		private System.Nullable<double> _PaymentAmount;
		
		private System.TimeSpan _FromDate;
		
		private System.TimeSpan _ToDate;
		
		private bool _HasLimitedHours;
		
		private System.Nullable<System.DateTime> _FromHour;
		
		private System.Nullable<System.DateTime> _ToHour;
		
		private System.Nullable<bool> _Mon;
		
		private bool _Tue;
		
		private bool _Wed;
		
		private bool _Thu;
		
		private bool _Fri;
		
		private bool _Sat;
		
		private bool _Sun;
		
		private bool _IsActive;
		
		private EntitySet<tblCheckIn> _tblCheckIns;
		
		private EntitySet<tblPayment> _tblPayments;
		
		private EntityRef<tblCustomer> _tblCustomer;
		
		private EntityRef<tblPlan> _tblPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerPlanIDChanging(long value);
    partial void OnCustomerPlanIDChanged();
    partial void OnCustomerIDChanging(long value);
    partial void OnCustomerIDChanged();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    partial void OnTotalFeesChanging(System.Nullable<double> value);
    partial void OnTotalFeesChanged();
    partial void OnPaymentAmountChanging(System.Nullable<double> value);
    partial void OnPaymentAmountChanged();
    partial void OnFromDateChanging(System.TimeSpan value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.TimeSpan value);
    partial void OnToDateChanged();
    partial void OnHasLimitedHoursChanging(bool value);
    partial void OnHasLimitedHoursChanged();
    partial void OnFromHourChanging(System.Nullable<System.DateTime> value);
    partial void OnFromHourChanged();
    partial void OnToHourChanging(System.Nullable<System.DateTime> value);
    partial void OnToHourChanged();
    partial void OnMonChanging(System.Nullable<bool> value);
    partial void OnMonChanged();
    partial void OnTueChanging(bool value);
    partial void OnTueChanged();
    partial void OnWedChanging(bool value);
    partial void OnWedChanged();
    partial void OnThuChanging(bool value);
    partial void OnThuChanged();
    partial void OnFriChanging(bool value);
    partial void OnFriChanged();
    partial void OnSatChanging(bool value);
    partial void OnSatChanged();
    partial void OnSunChanging(bool value);
    partial void OnSunChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblCustomerPlan()
		{
			this._tblCheckIns = new EntitySet<tblCheckIn>(new Action<tblCheckIn>(this.attach_tblCheckIns), new Action<tblCheckIn>(this.detach_tblCheckIns));
			this._tblPayments = new EntitySet<tblPayment>(new Action<tblPayment>(this.attach_tblPayments), new Action<tblPayment>(this.detach_tblPayments));
			this._tblCustomer = default(EntityRef<tblCustomer>);
			this._tblPlan = default(EntityRef<tblPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPlanID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CustomerPlanID
		{
			get
			{
				return this._CustomerPlanID;
			}
			set
			{
				if ((this._CustomerPlanID != value))
				{
					this.OnCustomerPlanIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerPlanID = value;
					this.SendPropertyChanged("CustomerPlanID");
					this.OnCustomerPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="BigInt NOT NULL")]
		public long CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._tblCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", DbType="Int NOT NULL")]
		public int PlanID
		{
			get
			{
				return this._PlanID;
			}
			set
			{
				if ((this._PlanID != value))
				{
					if (this._tblPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIDChanging(value);
					this.SendPropertyChanging();
					this._PlanID = value;
					this.SendPropertyChanged("PlanID");
					this.OnPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalFees", DbType="Float")]
		public System.Nullable<double> TotalFees
		{
			get
			{
				return this._TotalFees;
			}
			set
			{
				if ((this._TotalFees != value))
				{
					this.OnTotalFeesChanging(value);
					this.SendPropertyChanging();
					this._TotalFees = value;
					this.SendPropertyChanged("TotalFees");
					this.OnTotalFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentAmount", DbType="Float")]
		public System.Nullable<double> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="Time NOT NULL")]
		public System.TimeSpan FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="Time NOT NULL")]
		public System.TimeSpan ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasLimitedHours", DbType="Bit NOT NULL")]
		public bool HasLimitedHours
		{
			get
			{
				return this._HasLimitedHours;
			}
			set
			{
				if ((this._HasLimitedHours != value))
				{
					this.OnHasLimitedHoursChanging(value);
					this.SendPropertyChanging();
					this._HasLimitedHours = value;
					this.SendPropertyChanged("HasLimitedHours");
					this.OnHasLimitedHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromHour", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromHour
		{
			get
			{
				return this._FromHour;
			}
			set
			{
				if ((this._FromHour != value))
				{
					this.OnFromHourChanging(value);
					this.SendPropertyChanging();
					this._FromHour = value;
					this.SendPropertyChanged("FromHour");
					this.OnFromHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToHour", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToHour
		{
			get
			{
				return this._ToHour;
			}
			set
			{
				if ((this._ToHour != value))
				{
					this.OnToHourChanging(value);
					this.SendPropertyChanging();
					this._ToHour = value;
					this.SendPropertyChanged("ToHour");
					this.OnToHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mon", DbType="Bit")]
		public System.Nullable<bool> Mon
		{
			get
			{
				return this._Mon;
			}
			set
			{
				if ((this._Mon != value))
				{
					this.OnMonChanging(value);
					this.SendPropertyChanging();
					this._Mon = value;
					this.SendPropertyChanged("Mon");
					this.OnMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tue", DbType="Bit NOT NULL")]
		public bool Tue
		{
			get
			{
				return this._Tue;
			}
			set
			{
				if ((this._Tue != value))
				{
					this.OnTueChanging(value);
					this.SendPropertyChanging();
					this._Tue = value;
					this.SendPropertyChanged("Tue");
					this.OnTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wed", DbType="Bit NOT NULL")]
		public bool Wed
		{
			get
			{
				return this._Wed;
			}
			set
			{
				if ((this._Wed != value))
				{
					this.OnWedChanging(value);
					this.SendPropertyChanging();
					this._Wed = value;
					this.SendPropertyChanged("Wed");
					this.OnWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thu", DbType="Bit NOT NULL")]
		public bool Thu
		{
			get
			{
				return this._Thu;
			}
			set
			{
				if ((this._Thu != value))
				{
					this.OnThuChanging(value);
					this.SendPropertyChanging();
					this._Thu = value;
					this.SendPropertyChanged("Thu");
					this.OnThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fri", DbType="Bit NOT NULL")]
		public bool Fri
		{
			get
			{
				return this._Fri;
			}
			set
			{
				if ((this._Fri != value))
				{
					this.OnFriChanging(value);
					this.SendPropertyChanging();
					this._Fri = value;
					this.SendPropertyChanged("Fri");
					this.OnFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sat", DbType="Bit NOT NULL")]
		public bool Sat
		{
			get
			{
				return this._Sat;
			}
			set
			{
				if ((this._Sat != value))
				{
					this.OnSatChanging(value);
					this.SendPropertyChanging();
					this._Sat = value;
					this.SendPropertyChanged("Sat");
					this.OnSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sun", DbType="Bit NOT NULL")]
		public bool Sun
		{
			get
			{
				return this._Sun;
			}
			set
			{
				if ((this._Sun != value))
				{
					this.OnSunChanging(value);
					this.SendPropertyChanging();
					this._Sun = value;
					this.SendPropertyChanged("Sun");
					this.OnSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomerPlan_tblCheckIn", Storage="_tblCheckIns", ThisKey="CustomerPlanID", OtherKey="CustomerPlanID")]
		public EntitySet<tblCheckIn> tblCheckIns
		{
			get
			{
				return this._tblCheckIns;
			}
			set
			{
				this._tblCheckIns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomerPlan_tblPayment", Storage="_tblPayments", ThisKey="CustomerPlanID", OtherKey="CustomerPlanID")]
		public EntitySet<tblPayment> tblPayments
		{
			get
			{
				return this._tblPayments;
			}
			set
			{
				this._tblPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomer_tblCustomerPlan", Storage="_tblCustomer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public tblCustomer tblCustomer
		{
			get
			{
				return this._tblCustomer.Entity;
			}
			set
			{
				tblCustomer previousValue = this._tblCustomer.Entity;
				if (((previousValue != value) 
							|| (this._tblCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCustomer.Entity = null;
						previousValue.tblCustomerPlans.Remove(this);
					}
					this._tblCustomer.Entity = value;
					if ((value != null))
					{
						value.tblCustomerPlans.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(long);
					}
					this.SendPropertyChanged("tblCustomer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlan_tblCustomerPlan", Storage="_tblPlan", ThisKey="PlanID", OtherKey="PlanID", IsForeignKey=true)]
		public tblPlan tblPlan
		{
			get
			{
				return this._tblPlan.Entity;
			}
			set
			{
				tblPlan previousValue = this._tblPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPlan.Entity = null;
						previousValue.tblCustomerPlans.Remove(this);
					}
					this._tblPlan.Entity = value;
					if ((value != null))
					{
						value.tblCustomerPlans.Add(this);
						this._PlanID = value.PlanID;
					}
					else
					{
						this._PlanID = default(int);
					}
					this.SendPropertyChanged("tblPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCheckIns(tblCheckIn entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomerPlan = this;
		}
		
		private void detach_tblCheckIns(tblCheckIn entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomerPlan = null;
		}
		
		private void attach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomerPlan = this;
		}
		
		private void detach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblCustomerPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMeasurement")]
	public partial class tblMeasurement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MeasurementID;
		
		private long _CustomerID;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<double> _Chest;
		
		private System.Nullable<double> _Neck;
		
		private System.Nullable<double> _Hip;
		
		private System.Nullable<double> _Body_Fat;
		
		private System.DateTime _MeasurementDate;
		
		private EntityRef<tblCustomer> _tblCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasurementIDChanging(long value);
    partial void OnMeasurementIDChanged();
    partial void OnCustomerIDChanging(long value);
    partial void OnCustomerIDChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnChestChanging(System.Nullable<double> value);
    partial void OnChestChanged();
    partial void OnNeckChanging(System.Nullable<double> value);
    partial void OnNeckChanged();
    partial void OnHipChanging(System.Nullable<double> value);
    partial void OnHipChanged();
    partial void OnBody_FatChanging(System.Nullable<double> value);
    partial void OnBody_FatChanged();
    partial void OnMeasurementDateChanging(System.DateTime value);
    partial void OnMeasurementDateChanged();
    #endregion
		
		public tblMeasurement()
		{
			this._tblCustomer = default(EntityRef<tblCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MeasurementID
		{
			get
			{
				return this._MeasurementID;
			}
			set
			{
				if ((this._MeasurementID != value))
				{
					this.OnMeasurementIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementID = value;
					this.SendPropertyChanged("MeasurementID");
					this.OnMeasurementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="BigInt NOT NULL")]
		public long CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._tblCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chest", DbType="Float")]
		public System.Nullable<double> Chest
		{
			get
			{
				return this._Chest;
			}
			set
			{
				if ((this._Chest != value))
				{
					this.OnChestChanging(value);
					this.SendPropertyChanging();
					this._Chest = value;
					this.SendPropertyChanged("Chest");
					this.OnChestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Neck", DbType="Float")]
		public System.Nullable<double> Neck
		{
			get
			{
				return this._Neck;
			}
			set
			{
				if ((this._Neck != value))
				{
					this.OnNeckChanging(value);
					this.SendPropertyChanging();
					this._Neck = value;
					this.SendPropertyChanged("Neck");
					this.OnNeckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hip", DbType="Float")]
		public System.Nullable<double> Hip
		{
			get
			{
				return this._Hip;
			}
			set
			{
				if ((this._Hip != value))
				{
					this.OnHipChanging(value);
					this.SendPropertyChanging();
					this._Hip = value;
					this.SendPropertyChanged("Hip");
					this.OnHipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Body Fat]", Storage="_Body_Fat", DbType="Float")]
		public System.Nullable<double> Body_Fat
		{
			get
			{
				return this._Body_Fat;
			}
			set
			{
				if ((this._Body_Fat != value))
				{
					this.OnBody_FatChanging(value);
					this.SendPropertyChanging();
					this._Body_Fat = value;
					this.SendPropertyChanged("Body_Fat");
					this.OnBody_FatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementDate", DbType="DateTime NOT NULL")]
		public System.DateTime MeasurementDate
		{
			get
			{
				return this._MeasurementDate;
			}
			set
			{
				if ((this._MeasurementDate != value))
				{
					this.OnMeasurementDateChanging(value);
					this.SendPropertyChanging();
					this._MeasurementDate = value;
					this.SendPropertyChanged("MeasurementDate");
					this.OnMeasurementDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomer_tblMeasurement", Storage="_tblCustomer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public tblCustomer tblCustomer
		{
			get
			{
				return this._tblCustomer.Entity;
			}
			set
			{
				tblCustomer previousValue = this._tblCustomer.Entity;
				if (((previousValue != value) 
							|| (this._tblCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCustomer.Entity = null;
						previousValue.tblMeasurements.Remove(this);
					}
					this._tblCustomer.Entity = value;
					if ((value != null))
					{
						value.tblMeasurements.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(long);
					}
					this.SendPropertyChanged("tblCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPayment")]
	public partial class tblPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PaymentID;
		
		private long _CustomerPlanID;
		
		private int _Amount;
		
		private System.DateTime _PaymentDate;
		
		private bool _IsDeleted;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntityRef<tblCustomerPlan> _tblCustomerPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(long value);
    partial void OnPaymentIDChanged();
    partial void OnCustomerPlanIDChanging(long value);
    partial void OnCustomerPlanIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblPayment()
		{
			this._tblCustomerPlan = default(EntityRef<tblCustomerPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPlanID", DbType="BigInt NOT NULL")]
		public long CustomerPlanID
		{
			get
			{
				return this._CustomerPlanID;
			}
			set
			{
				if ((this._CustomerPlanID != value))
				{
					if (this._tblCustomerPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerPlanIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerPlanID = value;
					this.SendPropertyChanged("CustomerPlanID");
					this.OnCustomerPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCustomerPlan_tblPayment", Storage="_tblCustomerPlan", ThisKey="CustomerPlanID", OtherKey="CustomerPlanID", IsForeignKey=true)]
		public tblCustomerPlan tblCustomerPlan
		{
			get
			{
				return this._tblCustomerPlan.Entity;
			}
			set
			{
				tblCustomerPlan previousValue = this._tblCustomerPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblCustomerPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCustomerPlan.Entity = null;
						previousValue.tblPayments.Remove(this);
					}
					this._tblCustomerPlan.Entity = value;
					if ((value != null))
					{
						value.tblPayments.Add(this);
						this._CustomerPlanID = value.CustomerPlanID;
					}
					else
					{
						this._CustomerPlanID = default(long);
					}
					this.SendPropertyChanged("tblCustomerPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPlan")]
	public partial class tblPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlanID;
		
		private int _PlanTypeID;
		
		private string _PlanName;
		
		private int _ContractLenght;
		
		private System.Nullable<double> _TotalFees;
		
		private System.Nullable<double> _PaymentDayAmount;
		
		private System.Nullable<double> _PaymentMonthAmount;
		
		private bool _HasLimitedHours;
		
		private System.Nullable<System.TimeSpan> _FromHour;
		
		private System.Nullable<System.TimeSpan> _ToHour;
		
		private System.Nullable<bool> _Mon;
		
		private System.Nullable<bool> _Tue;
		
		private System.Nullable<bool> _Wed;
		
		private System.Nullable<bool> _Thu;
		
		private System.Nullable<bool> _Fri;
		
		private System.Nullable<bool> _Sat;
		
		private System.Nullable<bool> _Sun;
		
		private bool _IsActive;
		
		private EntitySet<tblCustomerPlan> _tblCustomerPlans;
		
		private EntityRef<tblPlanType> _tblPlanType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    partial void OnPlanTypeIDChanging(int value);
    partial void OnPlanTypeIDChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnContractLenghtChanging(int value);
    partial void OnContractLenghtChanged();
    partial void OnTotalFeesChanging(System.Nullable<double> value);
    partial void OnTotalFeesChanged();
    partial void OnPaymentDayAmountChanging(System.Nullable<double> value);
    partial void OnPaymentDayAmountChanged();
    partial void OnPaymentMonthAmountChanging(System.Nullable<double> value);
    partial void OnPaymentMonthAmountChanged();
    partial void OnHasLimitedHoursChanging(bool value);
    partial void OnHasLimitedHoursChanged();
    partial void OnFromHourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnFromHourChanged();
    partial void OnToHourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnToHourChanged();
    partial void OnMonChanging(System.Nullable<bool> value);
    partial void OnMonChanged();
    partial void OnTueChanging(System.Nullable<bool> value);
    partial void OnTueChanged();
    partial void OnWedChanging(System.Nullable<bool> value);
    partial void OnWedChanged();
    partial void OnThuChanging(System.Nullable<bool> value);
    partial void OnThuChanged();
    partial void OnFriChanging(System.Nullable<bool> value);
    partial void OnFriChanged();
    partial void OnSatChanging(System.Nullable<bool> value);
    partial void OnSatChanged();
    partial void OnSunChanging(System.Nullable<bool> value);
    partial void OnSunChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblPlan()
		{
			this._tblCustomerPlans = new EntitySet<tblCustomerPlan>(new Action<tblCustomerPlan>(this.attach_tblCustomerPlans), new Action<tblCustomerPlan>(this.detach_tblCustomerPlans));
			this._tblPlanType = default(EntityRef<tblPlanType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlanID
		{
			get
			{
				return this._PlanID;
			}
			set
			{
				if ((this._PlanID != value))
				{
					this.OnPlanIDChanging(value);
					this.SendPropertyChanging();
					this._PlanID = value;
					this.SendPropertyChanged("PlanID");
					this.OnPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanTypeID", DbType="Int NOT NULL")]
		public int PlanTypeID
		{
			get
			{
				return this._PlanTypeID;
			}
			set
			{
				if ((this._PlanTypeID != value))
				{
					if (this._tblPlanType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PlanTypeID = value;
					this.SendPropertyChanged("PlanTypeID");
					this.OnPlanTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractLenght", DbType="Int NOT NULL")]
		public int ContractLenght
		{
			get
			{
				return this._ContractLenght;
			}
			set
			{
				if ((this._ContractLenght != value))
				{
					this.OnContractLenghtChanging(value);
					this.SendPropertyChanging();
					this._ContractLenght = value;
					this.SendPropertyChanged("ContractLenght");
					this.OnContractLenghtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalFees", DbType="Float")]
		public System.Nullable<double> TotalFees
		{
			get
			{
				return this._TotalFees;
			}
			set
			{
				if ((this._TotalFees != value))
				{
					this.OnTotalFeesChanging(value);
					this.SendPropertyChanging();
					this._TotalFees = value;
					this.SendPropertyChanged("TotalFees");
					this.OnTotalFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDayAmount", DbType="Float")]
		public System.Nullable<double> PaymentDayAmount
		{
			get
			{
				return this._PaymentDayAmount;
			}
			set
			{
				if ((this._PaymentDayAmount != value))
				{
					this.OnPaymentDayAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentDayAmount = value;
					this.SendPropertyChanged("PaymentDayAmount");
					this.OnPaymentDayAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMonthAmount", DbType="Float")]
		public System.Nullable<double> PaymentMonthAmount
		{
			get
			{
				return this._PaymentMonthAmount;
			}
			set
			{
				if ((this._PaymentMonthAmount != value))
				{
					this.OnPaymentMonthAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentMonthAmount = value;
					this.SendPropertyChanged("PaymentMonthAmount");
					this.OnPaymentMonthAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasLimitedHours", DbType="Bit NOT NULL")]
		public bool HasLimitedHours
		{
			get
			{
				return this._HasLimitedHours;
			}
			set
			{
				if ((this._HasLimitedHours != value))
				{
					this.OnHasLimitedHoursChanging(value);
					this.SendPropertyChanging();
					this._HasLimitedHours = value;
					this.SendPropertyChanged("HasLimitedHours");
					this.OnHasLimitedHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromHour", DbType="Time")]
		public System.Nullable<System.TimeSpan> FromHour
		{
			get
			{
				return this._FromHour;
			}
			set
			{
				if ((this._FromHour != value))
				{
					this.OnFromHourChanging(value);
					this.SendPropertyChanging();
					this._FromHour = value;
					this.SendPropertyChanged("FromHour");
					this.OnFromHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToHour", DbType="Time")]
		public System.Nullable<System.TimeSpan> ToHour
		{
			get
			{
				return this._ToHour;
			}
			set
			{
				if ((this._ToHour != value))
				{
					this.OnToHourChanging(value);
					this.SendPropertyChanging();
					this._ToHour = value;
					this.SendPropertyChanged("ToHour");
					this.OnToHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mon", DbType="Bit")]
		public System.Nullable<bool> Mon
		{
			get
			{
				return this._Mon;
			}
			set
			{
				if ((this._Mon != value))
				{
					this.OnMonChanging(value);
					this.SendPropertyChanging();
					this._Mon = value;
					this.SendPropertyChanged("Mon");
					this.OnMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tue", DbType="Bit")]
		public System.Nullable<bool> Tue
		{
			get
			{
				return this._Tue;
			}
			set
			{
				if ((this._Tue != value))
				{
					this.OnTueChanging(value);
					this.SendPropertyChanging();
					this._Tue = value;
					this.SendPropertyChanged("Tue");
					this.OnTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wed", DbType="Bit")]
		public System.Nullable<bool> Wed
		{
			get
			{
				return this._Wed;
			}
			set
			{
				if ((this._Wed != value))
				{
					this.OnWedChanging(value);
					this.SendPropertyChanging();
					this._Wed = value;
					this.SendPropertyChanged("Wed");
					this.OnWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thu", DbType="Bit")]
		public System.Nullable<bool> Thu
		{
			get
			{
				return this._Thu;
			}
			set
			{
				if ((this._Thu != value))
				{
					this.OnThuChanging(value);
					this.SendPropertyChanging();
					this._Thu = value;
					this.SendPropertyChanged("Thu");
					this.OnThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fri", DbType="Bit")]
		public System.Nullable<bool> Fri
		{
			get
			{
				return this._Fri;
			}
			set
			{
				if ((this._Fri != value))
				{
					this.OnFriChanging(value);
					this.SendPropertyChanging();
					this._Fri = value;
					this.SendPropertyChanged("Fri");
					this.OnFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sat", DbType="Bit")]
		public System.Nullable<bool> Sat
		{
			get
			{
				return this._Sat;
			}
			set
			{
				if ((this._Sat != value))
				{
					this.OnSatChanging(value);
					this.SendPropertyChanging();
					this._Sat = value;
					this.SendPropertyChanged("Sat");
					this.OnSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sun", DbType="Bit")]
		public System.Nullable<bool> Sun
		{
			get
			{
				return this._Sun;
			}
			set
			{
				if ((this._Sun != value))
				{
					this.OnSunChanging(value);
					this.SendPropertyChanging();
					this._Sun = value;
					this.SendPropertyChanged("Sun");
					this.OnSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlan_tblCustomerPlan", Storage="_tblCustomerPlans", ThisKey="PlanID", OtherKey="PlanID")]
		public EntitySet<tblCustomerPlan> tblCustomerPlans
		{
			get
			{
				return this._tblCustomerPlans;
			}
			set
			{
				this._tblCustomerPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlanType_tblPlan", Storage="_tblPlanType", ThisKey="PlanTypeID", OtherKey="PlanTypeID", IsForeignKey=true)]
		public tblPlanType tblPlanType
		{
			get
			{
				return this._tblPlanType.Entity;
			}
			set
			{
				tblPlanType previousValue = this._tblPlanType.Entity;
				if (((previousValue != value) 
							|| (this._tblPlanType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPlanType.Entity = null;
						previousValue.tblPlans.Remove(this);
					}
					this._tblPlanType.Entity = value;
					if ((value != null))
					{
						value.tblPlans.Add(this);
						this._PlanTypeID = value.PlanTypeID;
					}
					else
					{
						this._PlanTypeID = default(int);
					}
					this.SendPropertyChanged("tblPlanType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCustomerPlans(tblCustomerPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblPlan = this;
		}
		
		private void detach_tblCustomerPlans(tblCustomerPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPlanType")]
	public partial class tblPlanType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlanTypeID;
		
		private string _PlanTypeName;
		
		private EntitySet<tblPlan> _tblPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanTypeIDChanging(int value);
    partial void OnPlanTypeIDChanged();
    partial void OnPlanTypeNameChanging(string value);
    partial void OnPlanTypeNameChanged();
    #endregion
		
		public tblPlanType()
		{
			this._tblPlans = new EntitySet<tblPlan>(new Action<tblPlan>(this.attach_tblPlans), new Action<tblPlan>(this.detach_tblPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlanTypeID
		{
			get
			{
				return this._PlanTypeID;
			}
			set
			{
				if ((this._PlanTypeID != value))
				{
					this.OnPlanTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PlanTypeID = value;
					this.SendPropertyChanged("PlanTypeID");
					this.OnPlanTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlanTypeName
		{
			get
			{
				return this._PlanTypeName;
			}
			set
			{
				if ((this._PlanTypeName != value))
				{
					this.OnPlanTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PlanTypeName = value;
					this.SendPropertyChanged("PlanTypeName");
					this.OnPlanTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlanType_tblPlan", Storage="_tblPlans", ThisKey="PlanTypeID", OtherKey="PlanTypeID")]
		public EntitySet<tblPlan> tblPlans
		{
			get
			{
				return this._tblPlans;
			}
			set
			{
				this._tblPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPlans(tblPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblPlanType = this;
		}
		
		private void detach_tblPlans(tblPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblPlanType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStatus")]
	public partial class tblStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusCode;
		
		private string _StatusName;
		
		private EntitySet<tblCheckIn> _tblCheckIns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusCodeChanging(string value);
    partial void OnStatusCodeChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public tblStatus()
		{
			this._tblCheckIns = new EntitySet<tblCheckIn>(new Action<tblCheckIn>(this.attach_tblCheckIns), new Action<tblCheckIn>(this.detach_tblCheckIns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCode", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStatus_tblCheckIn", Storage="_tblCheckIns", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<tblCheckIn> tblCheckIns
		{
			get
			{
				return this._tblCheckIns;
			}
			set
			{
				this._tblCheckIns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCheckIns(tblCheckIn entity)
		{
			this.SendPropertyChanging();
			entity.tblStatus = this;
		}
		
		private void detach_tblCheckIns(tblCheckIn entity)
		{
			this.SendPropertyChanging();
			entity.tblStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStock")]
	public partial class tblStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private string _Item;
		
		private System.Nullable<double> _Price;
		
		private int _Quantity;
		
		private int _NetAmount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnItemChanging(string value);
    partial void OnItemChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNetAmountChanging(int value);
    partial void OnNetAmountChanged();
    #endregion
		
		public tblStock()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					this.OnItemChanging(value);
					this.SendPropertyChanging();
					this._Item = value;
					this.SendPropertyChanged("Item");
					this.OnItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetAmount", DbType="Int NOT NULL")]
		public int NetAmount
		{
			get
			{
				return this._NetAmount;
			}
			set
			{
				if ((this._NetAmount != value))
				{
					this.OnNetAmountChanging(value);
					this.SendPropertyChanging();
					this._NetAmount = value;
					this.SendPropertyChanged("NetAmount");
					this.OnNetAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
